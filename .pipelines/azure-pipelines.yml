trigger:
- main

variables:
  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/src'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'windows-2022'

    steps:

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          Import-Module BitsTransfer
          write-host "Starting download"
          Start-BitsTransfer -Source https://openblam.blob.core.windows.net/nuget/vcpkg-export-20220212-202727.zip -Destination $(Build.BinariesDirectory)/deps.zip
          write-host "Unzipping"
          expand-archive -Path $(Build.BinariesDirectory)/deps.zip  -DestinationPath $(Build.BinariesDirectory)
          write-host "normalizing dir"
          rename-item $(Build.BinariesDirectory)/vcpkg-export-20220212-202727 vcpkg\

    - task: VSBuild@1
      inputs:
        solution: '$(workingDirectory)\Superintendent.Mombasa\Superintendent.Mombasa.vcxproj'
        vsVersion: '17.0'
        msbuildArgs: '/p:ForceImportBeforeCppProps="$(Build.BinariesDirectory)\vcpkg\scripts\buildsystems\msbuild\vcpkg.props" /p:ForceImportAfterCppTargets="$(Build.BinariesDirectory)\vcpkg\scripts\buildsystems\msbuild\vcpkg.targets"'
        platform: 'x64'
        configuration: 'Release'
        msbuildArchitecture: 'x64'
        createLogFile: true

    # latest nightly may not have rustfmt/clippy
    # we can't check for both:
    # https://github.com/rust-lang/rustup-components-history/issues/9
    # but we at least check for one.
    # rustfmt _seems_ to break most often:
    - bash: |
        echo '##vso[task.setvariable variable=nightly]nightly-'$(curl -s https://rust-lang.github.io/rustup-components-history/x86_64-unknown-linux-gnu/rustfmt)
      displayName: "Determine latest style nightly"
    - template: install-rust.yml
      parameters:
        rust: $(nightly)
        components:
          - rustfmt
          - clippy
         
    - script: cargo build --release --lib
      workingDirectory: $(workingDirectory)/Superintendent.Native/mombasa
      displayName: cargo build
         
    - task: UseDotNet@2
      displayName: 'Use .NET 6 sdk'
      inputs:
        packageType: sdk
        version: 6.0.x

    - task: DotNetCoreCLI@2
      displayName: Pack Superintendent.Core NuGet
      inputs:
        command: 'pack'
        projects: '$(workingDirectory)/Superintendent.Core/Superintendent.Core.csproj'
        arguments: --configuration Release --output $(Build.ArtifactStagingDirectory)

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop