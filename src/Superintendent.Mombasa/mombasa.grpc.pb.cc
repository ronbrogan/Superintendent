// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mombasa.proto

#include "mombasa.pb.h"
#include "mombasa.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mombasa {

static const char* MombasaBridge_method_names[] = {
  "/mombasa.MombasaBridge/CallFunction",
  "/mombasa.MombasaBridge/AllocateMemory",
  "/mombasa.MombasaBridge/FreeMemory",
  "/mombasa.MombasaBridge/ProtectMemory",
  "/mombasa.MombasaBridge/WriteMemory",
  "/mombasa.MombasaBridge/ReadMemory",
  "/mombasa.MombasaBridge/ReadPointer",
  "/mombasa.MombasaBridge/WritePointer",
  "/mombasa.MombasaBridge/PollMemory",
  "/mombasa.MombasaBridge/MonitorMemory",
  "/mombasa.MombasaBridge/GetWorkerThread",
  "/mombasa.MombasaBridge/PauseAppThreads",
  "/mombasa.MombasaBridge/ResumeAppThreads",
  "/mombasa.MombasaBridge/SetTlsValue",
  "/mombasa.MombasaBridge/SetThreadLocalPointer",
  "/mombasa.MombasaBridge/GetThreadLocalPointer",
  "/mombasa.MombasaBridge/DxStart",
  "/mombasa.MombasaBridge/DxEnd",
};

std::unique_ptr< MombasaBridge::Stub> MombasaBridge::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MombasaBridge::Stub> stub(new MombasaBridge::Stub(channel, options));
  return stub;
}

MombasaBridge::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CallFunction_(MombasaBridge_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllocateMemory_(MombasaBridge_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreeMemory_(MombasaBridge_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ProtectMemory_(MombasaBridge_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WriteMemory_(MombasaBridge_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadMemory_(MombasaBridge_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReadPointer_(MombasaBridge_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WritePointer_(MombasaBridge_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PollMemory_(MombasaBridge_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_MonitorMemory_(MombasaBridge_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetWorkerThread_(MombasaBridge_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PauseAppThreads_(MombasaBridge_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResumeAppThreads_(MombasaBridge_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetTlsValue_(MombasaBridge_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetThreadLocalPointer_(MombasaBridge_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetThreadLocalPointer_(MombasaBridge_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DxStart_(MombasaBridge_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DxEnd_(MombasaBridge_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MombasaBridge::Stub::CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::mombasa::CallResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::CallRequest, ::mombasa::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallFunction_, context, request, response);
}

void MombasaBridge::Stub::async::CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::CallRequest, ::mombasa::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallFunction_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallFunction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>* MombasaBridge::Stub::PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::CallResponse, ::mombasa::CallRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallFunction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>* MombasaBridge::Stub::AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallFunctionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::mombasa::MemoryAllocateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllocateMemory_, context, request, response);
}

void MombasaBridge::Stub::async::AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllocateMemory_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllocateMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>* MombasaBridge::Stub::PrepareAsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::MemoryAllocateResponse, ::mombasa::MemoryAllocateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllocateMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>* MombasaBridge::Stub::AsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllocateMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::mombasa::MemoryFreeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FreeMemory_, context, request, response);
}

void MombasaBridge::Stub::async::FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreeMemory_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FreeMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>* MombasaBridge::Stub::PrepareAsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::MemoryFreeResponse, ::mombasa::MemoryFreeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FreeMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>* MombasaBridge::Stub::AsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFreeMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::mombasa::MemoryProtectResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ProtectMemory_, context, request, response);
}

void MombasaBridge::Stub::async::ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProtectMemory_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ProtectMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>* MombasaBridge::Stub::PrepareAsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::MemoryProtectResponse, ::mombasa::MemoryProtectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ProtectMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>* MombasaBridge::Stub::AsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProtectMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::mombasa::MemoryWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WriteMemory_, context, request, response);
}

void MombasaBridge::Stub::async::WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteMemory_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WriteMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>* MombasaBridge::Stub::PrepareAsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::MemoryWriteResponse, ::mombasa::MemoryWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WriteMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>* MombasaBridge::Stub::AsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWriteMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::mombasa::MemoryReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadMemory_, context, request, response);
}

void MombasaBridge::Stub::async::ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMemory_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadMemory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>* MombasaBridge::Stub::PrepareAsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::MemoryReadResponse, ::mombasa::MemoryReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadMemory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>* MombasaBridge::Stub::AsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadMemoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::mombasa::PointerReadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReadPointer_, context, request, response);
}

void MombasaBridge::Stub::async::ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadPointer_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReadPointer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>* MombasaBridge::Stub::PrepareAsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::PointerReadResponse, ::mombasa::PointerReadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReadPointer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>* MombasaBridge::Stub::AsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReadPointerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::mombasa::PointerWriteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_WritePointer_, context, request, response);
}

void MombasaBridge::Stub::async::WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePointer_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_WritePointer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>* MombasaBridge::Stub::PrepareAsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::PointerWriteResponse, ::mombasa::PointerWriteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_WritePointer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>* MombasaBridge::Stub::AsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncWritePointerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mombasa::MemoryReadResponse>* MombasaBridge::Stub::PollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mombasa::MemoryReadResponse>::Create(channel_.get(), rpcmethod_PollMemory_, context, request);
}

void MombasaBridge::Stub::async::PollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mombasa::MemoryReadResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_PollMemory_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>* MombasaBridge::Stub::AsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mombasa::MemoryReadResponse>::Create(channel_.get(), cq, rpcmethod_PollMemory_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>* MombasaBridge::Stub::PrepareAsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mombasa::MemoryReadResponse>::Create(channel_.get(), cq, rpcmethod_PollMemory_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mombasa::MemoryReadWriteMonitorResponse>* MombasaBridge::Stub::MonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mombasa::MemoryReadWriteMonitorResponse>::Create(channel_.get(), rpcmethod_MonitorMemory_, context, request);
}

void MombasaBridge::Stub::async::MonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadWriteMonitorResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mombasa::MemoryReadWriteMonitorResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_MonitorMemory_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>* MombasaBridge::Stub::AsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mombasa::MemoryReadWriteMonitorResponse>::Create(channel_.get(), cq, rpcmethod_MonitorMemory_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>* MombasaBridge::Stub::PrepareAsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mombasa::MemoryReadWriteMonitorResponse>::Create(channel_.get(), cq, rpcmethod_MonitorMemory_, context, request, false, nullptr);
}

::grpc::Status MombasaBridge::Stub::GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::mombasa::GetWorkerThreadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWorkerThread_, context, request, response);
}

void MombasaBridge::Stub::async::GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkerThread_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWorkerThread_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>* MombasaBridge::Stub::PrepareAsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::GetWorkerThreadResponse, ::mombasa::GetWorkerThreadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWorkerThread_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>* MombasaBridge::Stub::AsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWorkerThreadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::mombasa::PauseAppThreadsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PauseAppThreads_, context, request, response);
}

void MombasaBridge::Stub::async::PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseAppThreads_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PauseAppThreads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>* MombasaBridge::Stub::PrepareAsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::PauseAppThreadsResponse, ::mombasa::PauseAppThreadsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PauseAppThreads_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>* MombasaBridge::Stub::AsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPauseAppThreadsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::mombasa::ResumeAppThreadsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResumeAppThreads_, context, request, response);
}

void MombasaBridge::Stub::async::ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeAppThreads_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResumeAppThreads_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>* MombasaBridge::Stub::PrepareAsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::ResumeAppThreadsResponse, ::mombasa::ResumeAppThreadsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResumeAppThreads_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>* MombasaBridge::Stub::AsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResumeAppThreadsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::mombasa::SetTlsValueResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetTlsValue_, context, request, response);
}

void MombasaBridge::Stub::async::SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTlsValue_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetTlsValue_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>* MombasaBridge::Stub::PrepareAsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::SetTlsValueResponse, ::mombasa::SetTlsValueRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetTlsValue_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>* MombasaBridge::Stub::AsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetTlsValueRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::mombasa::SetThreadLocalPointerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetThreadLocalPointer_, context, request, response);
}

void MombasaBridge::Stub::async::SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetThreadLocalPointer_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetThreadLocalPointer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>* MombasaBridge::Stub::PrepareAsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::SetThreadLocalPointerResponse, ::mombasa::SetThreadLocalPointerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetThreadLocalPointer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>* MombasaBridge::Stub::AsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetThreadLocalPointerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::mombasa::GetThreadLocalPointerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetThreadLocalPointer_, context, request, response);
}

void MombasaBridge::Stub::async::GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetThreadLocalPointer_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetThreadLocalPointer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>* MombasaBridge::Stub::PrepareAsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::GetThreadLocalPointerResponse, ::mombasa::GetThreadLocalPointerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetThreadLocalPointer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>* MombasaBridge::Stub::AsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetThreadLocalPointerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::mombasa::DxStartResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::DxStartRequest, ::mombasa::DxStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DxStart_, context, request, response);
}

void MombasaBridge::Stub::async::DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::DxStartRequest, ::mombasa::DxStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DxStart_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DxStart_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>* MombasaBridge::Stub::PrepareAsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::DxStartResponse, ::mombasa::DxStartRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DxStart_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>* MombasaBridge::Stub::AsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDxStartRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status MombasaBridge::Stub::DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::mombasa::DxEndResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mombasa::DxEndRequest, ::mombasa::DxEndResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DxEnd_, context, request, response);
}

void MombasaBridge::Stub::async::DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mombasa::DxEndRequest, ::mombasa::DxEndResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DxEnd_, context, request, response, std::move(f));
}

void MombasaBridge::Stub::async::DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DxEnd_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>* MombasaBridge::Stub::PrepareAsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mombasa::DxEndResponse, ::mombasa::DxEndRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DxEnd_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>* MombasaBridge::Stub::AsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDxEndRaw(context, request, cq);
  result->StartCall();
  return result;
}

MombasaBridge::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::CallRequest, ::mombasa::CallResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::CallRequest* req,
             ::mombasa::CallResponse* resp) {
               return service->CallFunction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryAllocateRequest* req,
             ::mombasa::MemoryAllocateResponse* resp) {
               return service->AllocateMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryFreeRequest* req,
             ::mombasa::MemoryFreeResponse* resp) {
               return service->FreeMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryProtectRequest* req,
             ::mombasa::MemoryProtectResponse* resp) {
               return service->ProtectMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryWriteRequest* req,
             ::mombasa::MemoryWriteResponse* resp) {
               return service->WriteMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryReadRequest* req,
             ::mombasa::MemoryReadResponse* resp) {
               return service->ReadMemory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::PointerReadRequest* req,
             ::mombasa::PointerReadResponse* resp) {
               return service->ReadPointer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::PointerWriteRequest* req,
             ::mombasa::PointerWriteResponse* resp) {
               return service->WritePointer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MombasaBridge::Service, ::mombasa::MemoryPollRequest, ::mombasa::MemoryReadResponse>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryPollRequest* req,
             ::grpc::ServerWriter<::mombasa::MemoryReadResponse>* writer) {
               return service->PollMemory(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< MombasaBridge::Service, ::mombasa::MemoryReadWriteMonitorRequest, ::mombasa::MemoryReadWriteMonitorResponse>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::MemoryReadWriteMonitorRequest* req,
             ::grpc::ServerWriter<::mombasa::MemoryReadWriteMonitorResponse>* writer) {
               return service->MonitorMemory(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::GetWorkerThreadRequest* req,
             ::mombasa::GetWorkerThreadResponse* resp) {
               return service->GetWorkerThread(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::PauseAppThreadsRequest* req,
             ::mombasa::PauseAppThreadsResponse* resp) {
               return service->PauseAppThreads(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::ResumeAppThreadsRequest* req,
             ::mombasa::ResumeAppThreadsResponse* resp) {
               return service->ResumeAppThreads(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::SetTlsValueRequest* req,
             ::mombasa::SetTlsValueResponse* resp) {
               return service->SetTlsValue(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::SetThreadLocalPointerRequest* req,
             ::mombasa::SetThreadLocalPointerResponse* resp) {
               return service->SetThreadLocalPointer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::GetThreadLocalPointerRequest* req,
             ::mombasa::GetThreadLocalPointerResponse* resp) {
               return service->GetThreadLocalPointer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::DxStartRequest, ::mombasa::DxStartResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::DxStartRequest* req,
             ::mombasa::DxStartResponse* resp) {
               return service->DxStart(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MombasaBridge_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MombasaBridge::Service, ::mombasa::DxEndRequest, ::mombasa::DxEndResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](MombasaBridge::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mombasa::DxEndRequest* req,
             ::mombasa::DxEndResponse* resp) {
               return service->DxEnd(ctx, req, resp);
             }, this)));
}

MombasaBridge::Service::~Service() {
}

::grpc::Status MombasaBridge::Service::CallFunction(::grpc::ServerContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::AllocateMemory(::grpc::ServerContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::FreeMemory(::grpc::ServerContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::ProtectMemory(::grpc::ServerContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::WriteMemory(::grpc::ServerContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::ReadMemory(::grpc::ServerContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::ReadPointer(::grpc::ServerContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::WritePointer(::grpc::ServerContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::PollMemory(::grpc::ServerContext* context, const ::mombasa::MemoryPollRequest* request, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::MonitorMemory(::grpc::ServerContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::GetWorkerThread(::grpc::ServerContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::PauseAppThreads(::grpc::ServerContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::ResumeAppThreads(::grpc::ServerContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::SetTlsValue(::grpc::ServerContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::SetThreadLocalPointer(::grpc::ServerContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::GetThreadLocalPointer(::grpc::ServerContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::DxStart(::grpc::ServerContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MombasaBridge::Service::DxEnd(::grpc::ServerContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mombasa

