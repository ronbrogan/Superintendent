syntax = "proto3";
package mombasa;

service MombasaBridge {
    rpc CallFunction(CallRequest) returns (CallResponse);

    rpc AllocateMemory(MemoryAllocateRequest) returns (MemoryAllocateResponse);
    rpc FreeMemory(MemoryFreeRequest) returns (MemoryFreeResponse);
    rpc ProtectMemory(MemoryProtectRequest) returns (MemoryProtectResponse);

    rpc WriteMemory(MemoryWriteRequest) returns (MemoryWriteResponse);
    rpc ReadMemory(MemoryReadRequest) returns (MemoryReadResponse);

    rpc ReadPointer(PointerReadRequest) returns (PointerReadResponse);
    rpc WritePointer(PointerWriteRequest) returns (PointerWriteResponse);

    rpc PollMemory(MemoryPollRequest) returns (stream MemoryReadResponse);

    rpc GetWorkerThread(GetWorkerThreadRequest) returns (GetWorkerThreadResponse);
    rpc PauseAppThreads(PauseAppThreadsRequest) returns (PauseAppThreadsResponse);
    rpc ResumeAppThreads(ResumeAppThreadsRequest) returns (ResumeAppThreadsResponse);
    rpc SetTlsValue(SetTlsValueRequest) returns (SetTlsValueResponse);
    rpc SetThreadLocalPointer(SetThreadLocalPointerRequest) returns (SetThreadLocalPointerResponse);
    rpc GetThreadLocalPointer(GetThreadLocalPointerRequest) returns (GetThreadLocalPointerResponse);

    // TODO first class function hooking?
 
    // TODO lock/semaphore sync? might not be worth it, could just hook funcs

    // TODO DX injection
    //rpc DxStart() returns (); // install hook and allocate anything
    //rpc DxEnd() returns (); // remove hook and free things
    //rpc DxDrawCommandList() returns (); // iterate over some mem and do buffering/drawing
    //rpc DxCreateShader() returns (); // upload shader source and prepare for use in commands
    //rpc DxCreateTexture() returns (); // upload texture and prepare for use in commands
    //rpc DxUseProjectionMatrix() returns (); // specify mem location to read projection matrix from
}

message CallRequest {
    fixed64 functionPointer = 1;
    repeated fixed64 args = 2;
    bool returnsFloat = 3;
}

message CallResponse {
    uint64 durationMicroseconds = 1;
    bool success = 2;
    fixed64 value = 3;
}

message MemoryWriteRequest {
    fixed64 address = 1;
    bytes data = 2;
}

message MemoryWriteResponse {
    uint64 durationMicroseconds = 1;
}

message MemoryPollRequest {
    fixed64 address = 1;
    uint32 count = 2;
    uint32 interval = 3;
}

message MemoryReadRequest {
    fixed64 address = 1;
    uint32 count = 2;
}

message MemoryReadResponse {
    uint64 durationMicroseconds = 1;
    fixed64 address = 2;
    bytes data = 3;
}

message PointerReadRequest {
    uint32 size = 1;
    fixed64 base = 2;
    repeated uint32 chain = 3;
}

message PointerReadResponse {
    uint64 durationMicroseconds = 1;
    fixed64 address = 2;
    bytes data = 3;
}

message PointerWriteRequest {
    fixed64 base = 1;
    repeated uint32 chain = 2;
    bytes data = 3;
}

message PointerWriteResponse {
    uint64 durationMicroseconds = 1;
    fixed64 address = 2;
}

message MemoryAllocateRequest {
    uint32 length = 1;
    uint32 protection = 2;
}

message MemoryAllocateResponse {
    uint64 durationMicroseconds = 1;
    fixed64 address = 2;
}

message MemoryFreeRequest {
    fixed64 address = 1;
    uint32 length = 2;
    uint32 freeType = 3;
}

message MemoryFreeResponse {
    uint64 durationMicroseconds = 1;
}

message MemoryProtectRequest {
    fixed64 address = 1;
    uint32 length = 2;
    uint32 protection = 3;
}

message MemoryProtectResponse {
    uint64 durationMicroseconds = 1;
}

message SetTlsValueRequest {
    uint32 index = 1;
    fixed64 value = 2;
}

message SetTlsValueResponse {
    uint64 durationMicroseconds = 1;
}

message SetThreadLocalPointerRequest {
    fixed64 value = 1;
}

message SetThreadLocalPointerResponse {
    uint64 durationMicroseconds = 1;
}

message GetThreadLocalPointerRequest {
    uint64 why = 1;
}

message GetThreadLocalPointerResponse {
    uint64 durationMicroseconds = 1;
    fixed64 value = 2;
}

message GetWorkerThreadRequest {
}

message GetWorkerThreadResponse {
    uint64 durationMicroseconds = 1;
    fixed64 threadId = 2;
}

message PauseAppThreadsRequest {
}

message PauseAppThreadsResponse {
    uint64 durationMicroseconds = 1;
    map<uint32, uint32> threadSuspendCounts = 2;
}

message ResumeAppThreadsRequest {
}

message ResumeAppThreadsResponse {
    uint64 durationMicroseconds = 1;
    map<uint32, uint32> threadSuspendCounts = 2;
}