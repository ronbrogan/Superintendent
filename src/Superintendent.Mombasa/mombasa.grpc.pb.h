// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mombasa.proto
#ifndef GRPC_mombasa_2eproto__INCLUDED
#define GRPC_mombasa_2eproto__INCLUDED

#include "mombasa.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace mombasa {

class MombasaBridge final {
 public:
  static constexpr char const* service_full_name() {
    return "mombasa.MombasaBridge";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::mombasa::CallResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>> AsyncCallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>>(AsyncCallFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>> PrepareAsyncCallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>>(PrepareAsyncCallFunctionRaw(context, request, cq));
    }
    virtual ::grpc::Status AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::mombasa::MemoryAllocateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>> AsyncAllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>>(AsyncAllocateMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>> PrepareAsyncAllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>>(PrepareAsyncAllocateMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::mombasa::MemoryFreeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>> AsyncFreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>>(AsyncFreeMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>> PrepareAsyncFreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>>(PrepareAsyncFreeMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::mombasa::MemoryProtectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>> AsyncProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>>(AsyncProtectMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>> PrepareAsyncProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>>(PrepareAsyncProtectMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::mombasa::MemoryWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>> AsyncWriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>>(AsyncWriteMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>> PrepareAsyncWriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>>(PrepareAsyncWriteMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::mombasa::MemoryReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>> AsyncReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>>(AsyncReadMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>> PrepareAsyncReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>>(PrepareAsyncReadMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::mombasa::PointerReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>> AsyncReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>>(AsyncReadPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>> PrepareAsyncReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>>(PrepareAsyncReadPointerRaw(context, request, cq));
    }
    virtual ::grpc::Status WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::mombasa::PointerWriteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>> AsyncWritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>>(AsyncWritePointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>> PrepareAsyncWritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>>(PrepareAsyncWritePointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mombasa::MemoryReadResponse>> PollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mombasa::MemoryReadResponse>>(PollMemoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>> AsyncPollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>>(AsyncPollMemoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>> PrepareAsyncPollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>>(PrepareAsyncPollMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>> MonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>>(MonitorMemoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>> AsyncMonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>>(AsyncMonitorMemoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>> PrepareAsyncMonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>>(PrepareAsyncMonitorMemoryRaw(context, request, cq));
    }
    virtual ::grpc::Status GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::mombasa::GetWorkerThreadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>> AsyncGetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>>(AsyncGetWorkerThreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>> PrepareAsyncGetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>>(PrepareAsyncGetWorkerThreadRaw(context, request, cq));
    }
    virtual ::grpc::Status PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::mombasa::PauseAppThreadsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>> AsyncPauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>>(AsyncPauseAppThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>> PrepareAsyncPauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>>(PrepareAsyncPauseAppThreadsRaw(context, request, cq));
    }
    virtual ::grpc::Status ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::mombasa::ResumeAppThreadsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>> AsyncResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>>(AsyncResumeAppThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>> PrepareAsyncResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>>(PrepareAsyncResumeAppThreadsRaw(context, request, cq));
    }
    virtual ::grpc::Status SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::mombasa::SetTlsValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>> AsyncSetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>>(AsyncSetTlsValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>> PrepareAsyncSetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>>(PrepareAsyncSetTlsValueRaw(context, request, cq));
    }
    virtual ::grpc::Status SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::mombasa::SetThreadLocalPointerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>> AsyncSetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>>(AsyncSetThreadLocalPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>> PrepareAsyncSetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>>(PrepareAsyncSetThreadLocalPointerRaw(context, request, cq));
    }
    virtual ::grpc::Status GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::mombasa::GetThreadLocalPointerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>> AsyncGetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>>(AsyncGetThreadLocalPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>> PrepareAsyncGetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>>(PrepareAsyncGetThreadLocalPointerRaw(context, request, cq));
    }
    // TODO first class function hooking?
    //
    // TODO lock/semaphore sync? might not be worth it, could just hook funcs
    //
    virtual ::grpc::Status DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::mombasa::DxStartResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>> AsyncDxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>>(AsyncDxStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>> PrepareAsyncDxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>>(PrepareAsyncDxStartRaw(context, request, cq));
    }
    // install hook and allocate anything
    virtual ::grpc::Status DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::mombasa::DxEndResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>> AsyncDxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>>(AsyncDxEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>> PrepareAsyncDxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>>(PrepareAsyncDxEndRaw(context, request, cq));
    }
    // remove hook and free things
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadResponse>* reactor) = 0;
      virtual void MonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadWriteMonitorResponse>* reactor) = 0;
      virtual void GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // TODO first class function hooking?
      //
      // TODO lock/semaphore sync? might not be worth it, could just hook funcs
      //
      virtual void DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // install hook and allocate anything
      virtual void DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // remove hook and free things
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>* AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::CallResponse>* PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>* AsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryAllocateResponse>* PrepareAsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>* AsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryFreeResponse>* PrepareAsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>* AsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryProtectResponse>* PrepareAsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>* AsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryWriteResponse>* PrepareAsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>* AsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::MemoryReadResponse>* PrepareAsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>* AsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerReadResponse>* PrepareAsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>* AsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PointerWriteResponse>* PrepareAsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mombasa::MemoryReadResponse>* PollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>* AsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadResponse>* PrepareAsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>* MonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>* AsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mombasa::MemoryReadWriteMonitorResponse>* PrepareAsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>* AsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetWorkerThreadResponse>* PrepareAsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>* AsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::PauseAppThreadsResponse>* PrepareAsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>* AsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::ResumeAppThreadsResponse>* PrepareAsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>* AsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetTlsValueResponse>* PrepareAsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>* AsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::SetThreadLocalPointerResponse>* PrepareAsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>* AsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::GetThreadLocalPointerResponse>* PrepareAsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>* AsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxStartResponse>* PrepareAsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>* AsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mombasa::DxEndResponse>* PrepareAsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::mombasa::CallResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>> AsyncCallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>>(AsyncCallFunctionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>> PrepareAsyncCallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>>(PrepareAsyncCallFunctionRaw(context, request, cq));
    }
    ::grpc::Status AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::mombasa::MemoryAllocateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>> AsyncAllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>>(AsyncAllocateMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>> PrepareAsyncAllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>>(PrepareAsyncAllocateMemoryRaw(context, request, cq));
    }
    ::grpc::Status FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::mombasa::MemoryFreeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>> AsyncFreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>>(AsyncFreeMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>> PrepareAsyncFreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>>(PrepareAsyncFreeMemoryRaw(context, request, cq));
    }
    ::grpc::Status ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::mombasa::MemoryProtectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>> AsyncProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>>(AsyncProtectMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>> PrepareAsyncProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>>(PrepareAsyncProtectMemoryRaw(context, request, cq));
    }
    ::grpc::Status WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::mombasa::MemoryWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>> AsyncWriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>>(AsyncWriteMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>> PrepareAsyncWriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>>(PrepareAsyncWriteMemoryRaw(context, request, cq));
    }
    ::grpc::Status ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::mombasa::MemoryReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>> AsyncReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>>(AsyncReadMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>> PrepareAsyncReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>>(PrepareAsyncReadMemoryRaw(context, request, cq));
    }
    ::grpc::Status ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::mombasa::PointerReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>> AsyncReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>>(AsyncReadPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>> PrepareAsyncReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>>(PrepareAsyncReadPointerRaw(context, request, cq));
    }
    ::grpc::Status WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::mombasa::PointerWriteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>> AsyncWritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>>(AsyncWritePointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>> PrepareAsyncWritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>>(PrepareAsyncWritePointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mombasa::MemoryReadResponse>> PollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mombasa::MemoryReadResponse>>(PollMemoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>> AsyncPollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>>(AsyncPollMemoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>> PrepareAsyncPollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>>(PrepareAsyncPollMemoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mombasa::MemoryReadWriteMonitorResponse>> MonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mombasa::MemoryReadWriteMonitorResponse>>(MonitorMemoryRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>> AsyncMonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>>(AsyncMonitorMemoryRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>> PrepareAsyncMonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>>(PrepareAsyncMonitorMemoryRaw(context, request, cq));
    }
    ::grpc::Status GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::mombasa::GetWorkerThreadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>> AsyncGetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>>(AsyncGetWorkerThreadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>> PrepareAsyncGetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>>(PrepareAsyncGetWorkerThreadRaw(context, request, cq));
    }
    ::grpc::Status PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::mombasa::PauseAppThreadsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>> AsyncPauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>>(AsyncPauseAppThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>> PrepareAsyncPauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>>(PrepareAsyncPauseAppThreadsRaw(context, request, cq));
    }
    ::grpc::Status ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::mombasa::ResumeAppThreadsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>> AsyncResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>>(AsyncResumeAppThreadsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>> PrepareAsyncResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>>(PrepareAsyncResumeAppThreadsRaw(context, request, cq));
    }
    ::grpc::Status SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::mombasa::SetTlsValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>> AsyncSetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>>(AsyncSetTlsValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>> PrepareAsyncSetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>>(PrepareAsyncSetTlsValueRaw(context, request, cq));
    }
    ::grpc::Status SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::mombasa::SetThreadLocalPointerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>> AsyncSetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>>(AsyncSetThreadLocalPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>> PrepareAsyncSetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>>(PrepareAsyncSetThreadLocalPointerRaw(context, request, cq));
    }
    ::grpc::Status GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::mombasa::GetThreadLocalPointerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>> AsyncGetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>>(AsyncGetThreadLocalPointerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>> PrepareAsyncGetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>>(PrepareAsyncGetThreadLocalPointerRaw(context, request, cq));
    }
    ::grpc::Status DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::mombasa::DxStartResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>> AsyncDxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>>(AsyncDxStartRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>> PrepareAsyncDxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>>(PrepareAsyncDxStartRaw(context, request, cq));
    }
    ::grpc::Status DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::mombasa::DxEndResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>> AsyncDxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>>(AsyncDxEndRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>> PrepareAsyncDxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>>(PrepareAsyncDxEndRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, std::function<void(::grpc::Status)>) override;
      void CallFunction(::grpc::ClientContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, std::function<void(::grpc::Status)>) override;
      void AllocateMemory(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, std::function<void(::grpc::Status)>) override;
      void FreeMemory(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, std::function<void(::grpc::Status)>) override;
      void ProtectMemory(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteMemory(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadPointer(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, std::function<void(::grpc::Status)>) override;
      void WritePointer(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PollMemory(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadResponse>* reactor) override;
      void MonitorMemory(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ClientReadReactor< ::mombasa::MemoryReadWriteMonitorResponse>* reactor) override;
      void GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWorkerThread(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, std::function<void(::grpc::Status)>) override;
      void PauseAppThreads(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, std::function<void(::grpc::Status)>) override;
      void ResumeAppThreads(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, std::function<void(::grpc::Status)>) override;
      void SetTlsValue(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)>) override;
      void SetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, std::function<void(::grpc::Status)>) override;
      void GetThreadLocalPointer(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, std::function<void(::grpc::Status)>) override;
      void DxStart(::grpc::ClientContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, std::function<void(::grpc::Status)>) override;
      void DxEnd(::grpc::ClientContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>* AsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::CallResponse>* PrepareAsyncCallFunctionRaw(::grpc::ClientContext* context, const ::mombasa::CallRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>* AsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryAllocateResponse>* PrepareAsyncAllocateMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryAllocateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>* AsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryFreeResponse>* PrepareAsyncFreeMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryFreeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>* AsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryProtectResponse>* PrepareAsyncProtectMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryProtectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>* AsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryWriteResponse>* PrepareAsyncWriteMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>* AsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::MemoryReadResponse>* PrepareAsyncReadMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>* AsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PointerReadResponse>* PrepareAsyncReadPointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>* AsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PointerWriteResponse>* PrepareAsyncWritePointerRaw(::grpc::ClientContext* context, const ::mombasa::PointerWriteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mombasa::MemoryReadResponse>* PollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request) override;
    ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>* AsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mombasa::MemoryReadResponse>* PrepareAsyncPollMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryPollRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mombasa::MemoryReadWriteMonitorResponse>* MonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request) override;
    ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>* AsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mombasa::MemoryReadWriteMonitorResponse>* PrepareAsyncMonitorMemoryRaw(::grpc::ClientContext* context, const ::mombasa::MemoryReadWriteMonitorRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>* AsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::GetWorkerThreadResponse>* PrepareAsyncGetWorkerThreadRaw(::grpc::ClientContext* context, const ::mombasa::GetWorkerThreadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>* AsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::PauseAppThreadsResponse>* PrepareAsyncPauseAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::PauseAppThreadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>* AsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::ResumeAppThreadsResponse>* PrepareAsyncResumeAppThreadsRaw(::grpc::ClientContext* context, const ::mombasa::ResumeAppThreadsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>* AsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::SetTlsValueResponse>* PrepareAsyncSetTlsValueRaw(::grpc::ClientContext* context, const ::mombasa::SetTlsValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>* AsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::SetThreadLocalPointerResponse>* PrepareAsyncSetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::SetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>* AsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::GetThreadLocalPointerResponse>* PrepareAsyncGetThreadLocalPointerRaw(::grpc::ClientContext* context, const ::mombasa::GetThreadLocalPointerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>* AsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::DxStartResponse>* PrepareAsyncDxStartRaw(::grpc::ClientContext* context, const ::mombasa::DxStartRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>* AsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mombasa::DxEndResponse>* PrepareAsyncDxEndRaw(::grpc::ClientContext* context, const ::mombasa::DxEndRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CallFunction_;
    const ::grpc::internal::RpcMethod rpcmethod_AllocateMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_FreeMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_ProtectMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadPointer_;
    const ::grpc::internal::RpcMethod rpcmethod_WritePointer_;
    const ::grpc::internal::RpcMethod rpcmethod_PollMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_MonitorMemory_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWorkerThread_;
    const ::grpc::internal::RpcMethod rpcmethod_PauseAppThreads_;
    const ::grpc::internal::RpcMethod rpcmethod_ResumeAppThreads_;
    const ::grpc::internal::RpcMethod rpcmethod_SetTlsValue_;
    const ::grpc::internal::RpcMethod rpcmethod_SetThreadLocalPointer_;
    const ::grpc::internal::RpcMethod rpcmethod_GetThreadLocalPointer_;
    const ::grpc::internal::RpcMethod rpcmethod_DxStart_;
    const ::grpc::internal::RpcMethod rpcmethod_DxEnd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CallFunction(::grpc::ServerContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response);
    virtual ::grpc::Status AllocateMemory(::grpc::ServerContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response);
    virtual ::grpc::Status FreeMemory(::grpc::ServerContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response);
    virtual ::grpc::Status ProtectMemory(::grpc::ServerContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response);
    virtual ::grpc::Status WriteMemory(::grpc::ServerContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response);
    virtual ::grpc::Status ReadMemory(::grpc::ServerContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response);
    virtual ::grpc::Status ReadPointer(::grpc::ServerContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response);
    virtual ::grpc::Status WritePointer(::grpc::ServerContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response);
    virtual ::grpc::Status PollMemory(::grpc::ServerContext* context, const ::mombasa::MemoryPollRequest* request, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* writer);
    virtual ::grpc::Status MonitorMemory(::grpc::ServerContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* writer);
    virtual ::grpc::Status GetWorkerThread(::grpc::ServerContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response);
    virtual ::grpc::Status PauseAppThreads(::grpc::ServerContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response);
    virtual ::grpc::Status ResumeAppThreads(::grpc::ServerContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response);
    virtual ::grpc::Status SetTlsValue(::grpc::ServerContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response);
    virtual ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response);
    virtual ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response);
    // TODO first class function hooking?
    //
    // TODO lock/semaphore sync? might not be worth it, could just hook funcs
    //
    virtual ::grpc::Status DxStart(::grpc::ServerContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response);
    // install hook and allocate anything
    virtual ::grpc::Status DxEnd(::grpc::ServerContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response);
    // remove hook and free things
  };
  template <class BaseClass>
  class WithAsyncMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallFunction() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallFunction(::grpc::ServerContext* context, ::mombasa::CallRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::CallResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateMemory(::grpc::ServerContext* context, ::mombasa::MemoryAllocateRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::MemoryAllocateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_FreeMemory() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreeMemory(::grpc::ServerContext* context, ::mombasa::MemoryFreeRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::MemoryFreeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProtectMemory(::grpc::ServerContext* context, ::mombasa::MemoryProtectRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::MemoryProtectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteMemory() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteMemory(::grpc::ServerContext* context, ::mombasa::MemoryWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::MemoryWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadMemory() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadMemory(::grpc::ServerContext* context, ::mombasa::MemoryReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::MemoryReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadPointer() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadPointer(::grpc::ServerContext* context, ::mombasa::PointerReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::PointerReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WritePointer() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePointer(::grpc::ServerContext* context, ::mombasa::PointerWriteRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::PointerWriteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PollMemory() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollMemory(::grpc::ServerContext* context, ::mombasa::MemoryPollRequest* request, ::grpc::ServerAsyncWriter< ::mombasa::MemoryReadResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMonitorMemory(::grpc::ServerContext* context, ::mombasa::MemoryReadWriteMonitorRequest* request, ::grpc::ServerAsyncWriter< ::mombasa::MemoryReadWriteMonitorResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkerThread(::grpc::ServerContext* context, ::mombasa::GetWorkerThreadRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::GetWorkerThreadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseAppThreads(::grpc::ServerContext* context, ::mombasa::PauseAppThreadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::PauseAppThreadsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeAppThreads(::grpc::ServerContext* context, ::mombasa::ResumeAppThreadsRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::ResumeAppThreadsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTlsValue(::grpc::ServerContext* context, ::mombasa::SetTlsValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::SetTlsValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetThreadLocalPointer(::grpc::ServerContext* context, ::mombasa::SetThreadLocalPointerRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::SetThreadLocalPointerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThreadLocalPointer(::grpc::ServerContext* context, ::mombasa::GetThreadLocalPointerRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::GetThreadLocalPointerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DxStart() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDxStart(::grpc::ServerContext* context, ::mombasa::DxStartRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::DxStartResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DxEnd() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDxEnd(::grpc::ServerContext* context, ::mombasa::DxEndRequest* request, ::grpc::ServerAsyncResponseWriter< ::mombasa::DxEndResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CallFunction<WithAsyncMethod_AllocateMemory<WithAsyncMethod_FreeMemory<WithAsyncMethod_ProtectMemory<WithAsyncMethod_WriteMemory<WithAsyncMethod_ReadMemory<WithAsyncMethod_ReadPointer<WithAsyncMethod_WritePointer<WithAsyncMethod_PollMemory<WithAsyncMethod_MonitorMemory<WithAsyncMethod_GetWorkerThread<WithAsyncMethod_PauseAppThreads<WithAsyncMethod_ResumeAppThreads<WithAsyncMethod_SetTlsValue<WithAsyncMethod_SetThreadLocalPointer<WithAsyncMethod_GetThreadLocalPointer<WithAsyncMethod_DxStart<WithAsyncMethod_DxEnd<Service > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CallFunction() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::CallRequest, ::mombasa::CallResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::CallRequest* request, ::mombasa::CallResponse* response) { return this->CallFunction(context, request, response); }));}
    void SetMessageAllocatorFor_CallFunction(
        ::grpc::MessageAllocator< ::mombasa::CallRequest, ::mombasa::CallResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::CallRequest, ::mombasa::CallResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallFunction(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryAllocateRequest* request, ::mombasa::MemoryAllocateResponse* response) { return this->AllocateMemory(context, request, response); }));}
    void SetMessageAllocatorFor_AllocateMemory(
        ::grpc::MessageAllocator< ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllocateMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_FreeMemory() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryFreeRequest* request, ::mombasa::MemoryFreeResponse* response) { return this->FreeMemory(context, request, response); }));}
    void SetMessageAllocatorFor_FreeMemory(
        ::grpc::MessageAllocator< ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreeMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryProtectRequest* request, ::mombasa::MemoryProtectResponse* response) { return this->ProtectMemory(context, request, response); }));}
    void SetMessageAllocatorFor_ProtectMemory(
        ::grpc::MessageAllocator< ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProtectMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteMemory() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryWriteRequest* request, ::mombasa::MemoryWriteResponse* response) { return this->WriteMemory(context, request, response); }));}
    void SetMessageAllocatorFor_WriteMemory(
        ::grpc::MessageAllocator< ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadMemory() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryReadRequest* request, ::mombasa::MemoryReadResponse* response) { return this->ReadMemory(context, request, response); }));}
    void SetMessageAllocatorFor_ReadMemory(
        ::grpc::MessageAllocator< ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadPointer() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::PointerReadRequest* request, ::mombasa::PointerReadResponse* response) { return this->ReadPointer(context, request, response); }));}
    void SetMessageAllocatorFor_ReadPointer(
        ::grpc::MessageAllocator< ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WritePointer() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::PointerWriteRequest* request, ::mombasa::PointerWriteResponse* response) { return this->WritePointer(context, request, response); }));}
    void SetMessageAllocatorFor_WritePointer(
        ::grpc::MessageAllocator< ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WritePointer(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PollMemory() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mombasa::MemoryPollRequest, ::mombasa::MemoryReadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryPollRequest* request) { return this->PollMemory(context, request); }));
    }
    ~WithCallbackMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mombasa::MemoryReadResponse>* PollMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::mombasa::MemoryReadWriteMonitorRequest, ::mombasa::MemoryReadWriteMonitorResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::MemoryReadWriteMonitorRequest* request) { return this->MonitorMemory(context, request); }));
    }
    ~WithCallbackMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::mombasa::MemoryReadWriteMonitorResponse>* MonitorMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::GetWorkerThreadRequest* request, ::mombasa::GetWorkerThreadResponse* response) { return this->GetWorkerThread(context, request, response); }));}
    void SetMessageAllocatorFor_GetWorkerThread(
        ::grpc::MessageAllocator< ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkerThread(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::PauseAppThreadsRequest* request, ::mombasa::PauseAppThreadsResponse* response) { return this->PauseAppThreads(context, request, response); }));}
    void SetMessageAllocatorFor_PauseAppThreads(
        ::grpc::MessageAllocator< ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseAppThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::ResumeAppThreadsRequest* request, ::mombasa::ResumeAppThreadsResponse* response) { return this->ResumeAppThreads(context, request, response); }));}
    void SetMessageAllocatorFor_ResumeAppThreads(
        ::grpc::MessageAllocator< ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResumeAppThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::SetTlsValueRequest* request, ::mombasa::SetTlsValueResponse* response) { return this->SetTlsValue(context, request, response); }));}
    void SetMessageAllocatorFor_SetTlsValue(
        ::grpc::MessageAllocator< ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTlsValue(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::SetThreadLocalPointerRequest* request, ::mombasa::SetThreadLocalPointerResponse* response) { return this->SetThreadLocalPointer(context, request, response); }));}
    void SetMessageAllocatorFor_SetThreadLocalPointer(
        ::grpc::MessageAllocator< ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetThreadLocalPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::GetThreadLocalPointerRequest* request, ::mombasa::GetThreadLocalPointerResponse* response) { return this->GetThreadLocalPointer(context, request, response); }));}
    void SetMessageAllocatorFor_GetThreadLocalPointer(
        ::grpc::MessageAllocator< ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetThreadLocalPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DxStart() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::DxStartRequest, ::mombasa::DxStartResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::DxStartRequest* request, ::mombasa::DxStartResponse* response) { return this->DxStart(context, request, response); }));}
    void SetMessageAllocatorFor_DxStart(
        ::grpc::MessageAllocator< ::mombasa::DxStartRequest, ::mombasa::DxStartResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::DxStartRequest, ::mombasa::DxStartResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DxStart(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DxEnd() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::mombasa::DxEndRequest, ::mombasa::DxEndResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::mombasa::DxEndRequest* request, ::mombasa::DxEndResponse* response) { return this->DxEnd(context, request, response); }));}
    void SetMessageAllocatorFor_DxEnd(
        ::grpc::MessageAllocator< ::mombasa::DxEndRequest, ::mombasa::DxEndResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mombasa::DxEndRequest, ::mombasa::DxEndResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DxEnd(
      ::grpc::CallbackServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CallFunction<WithCallbackMethod_AllocateMemory<WithCallbackMethod_FreeMemory<WithCallbackMethod_ProtectMemory<WithCallbackMethod_WriteMemory<WithCallbackMethod_ReadMemory<WithCallbackMethod_ReadPointer<WithCallbackMethod_WritePointer<WithCallbackMethod_PollMemory<WithCallbackMethod_MonitorMemory<WithCallbackMethod_GetWorkerThread<WithCallbackMethod_PauseAppThreads<WithCallbackMethod_ResumeAppThreads<WithCallbackMethod_SetTlsValue<WithCallbackMethod_SetThreadLocalPointer<WithCallbackMethod_GetThreadLocalPointer<WithCallbackMethod_DxStart<WithCallbackMethod_DxEnd<Service > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallFunction() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_FreeMemory() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteMemory() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadMemory() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadPointer() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WritePointer() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PollMemory() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DxStart() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DxEnd() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallFunction() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallFunction(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAllocateMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_FreeMemory() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFreeMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProtectMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteMemory() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadMemory() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadPointer() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadPointer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WritePointer() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWritePointer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PollMemory() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPollMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMonitorMemory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWorkerThread(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPauseAppThreads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResumeAppThreads(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetTlsValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetThreadLocalPointer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThreadLocalPointer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DxStart() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDxStart(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DxEnd() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDxEnd(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CallFunction() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallFunction(context, request, response); }));
    }
    ~WithRawCallbackMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallFunction(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AllocateMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AllocateMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_FreeMemory() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->FreeMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* FreeMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ProtectMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ProtectMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteMemory() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadMemory() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadMemory(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadPointer() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadPointer(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WritePointer() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WritePointer(context, request, response); }));
    }
    ~WithRawCallbackMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WritePointer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PollMemory() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->PollMemory(context, request); }));
    }
    ~WithRawCallbackMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* PollMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->MonitorMemory(context, request); }));
    }
    ~WithRawCallbackMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* MonitorMemory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWorkerThread(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWorkerThread(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PauseAppThreads(context, request, response); }));
    }
    ~WithRawCallbackMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PauseAppThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResumeAppThreads(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResumeAppThreads(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetTlsValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetTlsValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetThreadLocalPointer(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetThreadLocalPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetThreadLocalPointer(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetThreadLocalPointer(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DxStart() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DxStart(context, request, response); }));
    }
    ~WithRawCallbackMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DxStart(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DxEnd() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DxEnd(context, request, response); }));
    }
    ~WithRawCallbackMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DxEnd(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallFunction : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallFunction() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::CallRequest, ::mombasa::CallResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::CallRequest, ::mombasa::CallResponse>* streamer) {
                       return this->StreamedCallFunction(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallFunction() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallFunction(::grpc::ServerContext* /*context*/, const ::mombasa::CallRequest* /*request*/, ::mombasa::CallResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallFunction(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::CallRequest,::mombasa::CallResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AllocateMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AllocateMemory() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::MemoryAllocateRequest, ::mombasa::MemoryAllocateResponse>* streamer) {
                       return this->StreamedAllocateMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AllocateMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AllocateMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryAllocateRequest* /*request*/, ::mombasa::MemoryAllocateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAllocateMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::MemoryAllocateRequest,::mombasa::MemoryAllocateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FreeMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_FreeMemory() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::MemoryFreeRequest, ::mombasa::MemoryFreeResponse>* streamer) {
                       return this->StreamedFreeMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_FreeMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FreeMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryFreeRequest* /*request*/, ::mombasa::MemoryFreeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFreeMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::MemoryFreeRequest,::mombasa::MemoryFreeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ProtectMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ProtectMemory() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::MemoryProtectRequest, ::mombasa::MemoryProtectResponse>* streamer) {
                       return this->StreamedProtectMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ProtectMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ProtectMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryProtectRequest* /*request*/, ::mombasa::MemoryProtectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProtectMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::MemoryProtectRequest,::mombasa::MemoryProtectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteMemory() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::MemoryWriteRequest, ::mombasa::MemoryWriteResponse>* streamer) {
                       return this->StreamedWriteMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryWriteRequest* /*request*/, ::mombasa::MemoryWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::MemoryWriteRequest,::mombasa::MemoryWriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadMemory() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::MemoryReadRequest, ::mombasa::MemoryReadResponse>* streamer) {
                       return this->StreamedReadMemory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadRequest* /*request*/, ::mombasa::MemoryReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadMemory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::MemoryReadRequest,::mombasa::MemoryReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadPointer() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::PointerReadRequest, ::mombasa::PointerReadResponse>* streamer) {
                       return this->StreamedReadPointer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadPointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerReadRequest* /*request*/, ::mombasa::PointerReadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadPointer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::PointerReadRequest,::mombasa::PointerReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WritePointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WritePointer() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::PointerWriteRequest, ::mombasa::PointerWriteResponse>* streamer) {
                       return this->StreamedWritePointer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WritePointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WritePointer(::grpc::ServerContext* /*context*/, const ::mombasa::PointerWriteRequest* /*request*/, ::mombasa::PointerWriteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWritePointer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::PointerWriteRequest,::mombasa::PointerWriteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWorkerThread : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWorkerThread() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::GetWorkerThreadRequest, ::mombasa::GetWorkerThreadResponse>* streamer) {
                       return this->StreamedGetWorkerThread(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWorkerThread() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWorkerThread(::grpc::ServerContext* /*context*/, const ::mombasa::GetWorkerThreadRequest* /*request*/, ::mombasa::GetWorkerThreadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWorkerThread(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::GetWorkerThreadRequest,::mombasa::GetWorkerThreadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PauseAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PauseAppThreads() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::PauseAppThreadsRequest, ::mombasa::PauseAppThreadsResponse>* streamer) {
                       return this->StreamedPauseAppThreads(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PauseAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PauseAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::PauseAppThreadsRequest* /*request*/, ::mombasa::PauseAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPauseAppThreads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::PauseAppThreadsRequest,::mombasa::PauseAppThreadsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResumeAppThreads : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResumeAppThreads() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::ResumeAppThreadsRequest, ::mombasa::ResumeAppThreadsResponse>* streamer) {
                       return this->StreamedResumeAppThreads(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResumeAppThreads() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResumeAppThreads(::grpc::ServerContext* /*context*/, const ::mombasa::ResumeAppThreadsRequest* /*request*/, ::mombasa::ResumeAppThreadsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResumeAppThreads(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::ResumeAppThreadsRequest,::mombasa::ResumeAppThreadsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetTlsValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetTlsValue() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::SetTlsValueRequest, ::mombasa::SetTlsValueResponse>* streamer) {
                       return this->StreamedSetTlsValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetTlsValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetTlsValue(::grpc::ServerContext* /*context*/, const ::mombasa::SetTlsValueRequest* /*request*/, ::mombasa::SetTlsValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetTlsValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::SetTlsValueRequest,::mombasa::SetTlsValueResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetThreadLocalPointer() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::SetThreadLocalPointerRequest, ::mombasa::SetThreadLocalPointerResponse>* streamer) {
                       return this->StreamedSetThreadLocalPointer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::SetThreadLocalPointerRequest* /*request*/, ::mombasa::SetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetThreadLocalPointer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::SetThreadLocalPointerRequest,::mombasa::SetThreadLocalPointerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetThreadLocalPointer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetThreadLocalPointer() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::GetThreadLocalPointerRequest, ::mombasa::GetThreadLocalPointerResponse>* streamer) {
                       return this->StreamedGetThreadLocalPointer(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetThreadLocalPointer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetThreadLocalPointer(::grpc::ServerContext* /*context*/, const ::mombasa::GetThreadLocalPointerRequest* /*request*/, ::mombasa::GetThreadLocalPointerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetThreadLocalPointer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::GetThreadLocalPointerRequest,::mombasa::GetThreadLocalPointerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DxStart : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DxStart() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::DxStartRequest, ::mombasa::DxStartResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::DxStartRequest, ::mombasa::DxStartResponse>* streamer) {
                       return this->StreamedDxStart(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DxStart() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DxStart(::grpc::ServerContext* /*context*/, const ::mombasa::DxStartRequest* /*request*/, ::mombasa::DxStartResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDxStart(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::DxStartRequest,::mombasa::DxStartResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DxEnd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DxEnd() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::mombasa::DxEndRequest, ::mombasa::DxEndResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::mombasa::DxEndRequest, ::mombasa::DxEndResponse>* streamer) {
                       return this->StreamedDxEnd(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DxEnd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DxEnd(::grpc::ServerContext* /*context*/, const ::mombasa::DxEndRequest* /*request*/, ::mombasa::DxEndResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDxEnd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mombasa::DxEndRequest,::mombasa::DxEndResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CallFunction<WithStreamedUnaryMethod_AllocateMemory<WithStreamedUnaryMethod_FreeMemory<WithStreamedUnaryMethod_ProtectMemory<WithStreamedUnaryMethod_WriteMemory<WithStreamedUnaryMethod_ReadMemory<WithStreamedUnaryMethod_ReadPointer<WithStreamedUnaryMethod_WritePointer<WithStreamedUnaryMethod_GetWorkerThread<WithStreamedUnaryMethod_PauseAppThreads<WithStreamedUnaryMethod_ResumeAppThreads<WithStreamedUnaryMethod_SetTlsValue<WithStreamedUnaryMethod_SetThreadLocalPointer<WithStreamedUnaryMethod_GetThreadLocalPointer<WithStreamedUnaryMethod_DxStart<WithStreamedUnaryMethod_DxEnd<Service > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_PollMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_PollMemory() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mombasa::MemoryPollRequest, ::mombasa::MemoryReadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mombasa::MemoryPollRequest, ::mombasa::MemoryReadResponse>* streamer) {
                       return this->StreamedPollMemory(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_PollMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PollMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryPollRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedPollMemory(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mombasa::MemoryPollRequest,::mombasa::MemoryReadResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_MonitorMemory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_MonitorMemory() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::mombasa::MemoryReadWriteMonitorRequest, ::mombasa::MemoryReadWriteMonitorResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::mombasa::MemoryReadWriteMonitorRequest, ::mombasa::MemoryReadWriteMonitorResponse>* streamer) {
                       return this->StreamedMonitorMemory(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_MonitorMemory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MonitorMemory(::grpc::ServerContext* /*context*/, const ::mombasa::MemoryReadWriteMonitorRequest* /*request*/, ::grpc::ServerWriter< ::mombasa::MemoryReadWriteMonitorResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMonitorMemory(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mombasa::MemoryReadWriteMonitorRequest,::mombasa::MemoryReadWriteMonitorResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_PollMemory<WithSplitStreamingMethod_MonitorMemory<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_CallFunction<WithStreamedUnaryMethod_AllocateMemory<WithStreamedUnaryMethod_FreeMemory<WithStreamedUnaryMethod_ProtectMemory<WithStreamedUnaryMethod_WriteMemory<WithStreamedUnaryMethod_ReadMemory<WithStreamedUnaryMethod_ReadPointer<WithStreamedUnaryMethod_WritePointer<WithSplitStreamingMethod_PollMemory<WithSplitStreamingMethod_MonitorMemory<WithStreamedUnaryMethod_GetWorkerThread<WithStreamedUnaryMethod_PauseAppThreads<WithStreamedUnaryMethod_ResumeAppThreads<WithStreamedUnaryMethod_SetTlsValue<WithStreamedUnaryMethod_SetThreadLocalPointer<WithStreamedUnaryMethod_GetThreadLocalPointer<WithStreamedUnaryMethod_DxStart<WithStreamedUnaryMethod_DxEnd<Service > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace mombasa


#endif  // GRPC_mombasa_2eproto__INCLUDED
