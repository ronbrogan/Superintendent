// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mombasa.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mombasa_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mombasa_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mombasa_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mombasa_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mombasa_2eproto;
namespace mombasa {
class CallRequest;
struct CallRequestDefaultTypeInternal;
extern CallRequestDefaultTypeInternal _CallRequest_default_instance_;
class CallResponse;
struct CallResponseDefaultTypeInternal;
extern CallResponseDefaultTypeInternal _CallResponse_default_instance_;
class MemoryAllocateRequest;
struct MemoryAllocateRequestDefaultTypeInternal;
extern MemoryAllocateRequestDefaultTypeInternal _MemoryAllocateRequest_default_instance_;
class MemoryAllocateResponse;
struct MemoryAllocateResponseDefaultTypeInternal;
extern MemoryAllocateResponseDefaultTypeInternal _MemoryAllocateResponse_default_instance_;
class MemoryFreeRequest;
struct MemoryFreeRequestDefaultTypeInternal;
extern MemoryFreeRequestDefaultTypeInternal _MemoryFreeRequest_default_instance_;
class MemoryFreeResponse;
struct MemoryFreeResponseDefaultTypeInternal;
extern MemoryFreeResponseDefaultTypeInternal _MemoryFreeResponse_default_instance_;
class MemoryPollRequest;
struct MemoryPollRequestDefaultTypeInternal;
extern MemoryPollRequestDefaultTypeInternal _MemoryPollRequest_default_instance_;
class MemoryProtectRequest;
struct MemoryProtectRequestDefaultTypeInternal;
extern MemoryProtectRequestDefaultTypeInternal _MemoryProtectRequest_default_instance_;
class MemoryProtectResponse;
struct MemoryProtectResponseDefaultTypeInternal;
extern MemoryProtectResponseDefaultTypeInternal _MemoryProtectResponse_default_instance_;
class MemoryReadRequest;
struct MemoryReadRequestDefaultTypeInternal;
extern MemoryReadRequestDefaultTypeInternal _MemoryReadRequest_default_instance_;
class MemoryReadResponse;
struct MemoryReadResponseDefaultTypeInternal;
extern MemoryReadResponseDefaultTypeInternal _MemoryReadResponse_default_instance_;
class MemoryWriteRequest;
struct MemoryWriteRequestDefaultTypeInternal;
extern MemoryWriteRequestDefaultTypeInternal _MemoryWriteRequest_default_instance_;
class MemoryWriteResponse;
struct MemoryWriteResponseDefaultTypeInternal;
extern MemoryWriteResponseDefaultTypeInternal _MemoryWriteResponse_default_instance_;
class SetTlsValueRequest;
struct SetTlsValueRequestDefaultTypeInternal;
extern SetTlsValueRequestDefaultTypeInternal _SetTlsValueRequest_default_instance_;
class SetTlsValueResponse;
struct SetTlsValueResponseDefaultTypeInternal;
extern SetTlsValueResponseDefaultTypeInternal _SetTlsValueResponse_default_instance_;
}  // namespace mombasa
PROTOBUF_NAMESPACE_OPEN
template<> ::mombasa::CallRequest* Arena::CreateMaybeMessage<::mombasa::CallRequest>(Arena*);
template<> ::mombasa::CallResponse* Arena::CreateMaybeMessage<::mombasa::CallResponse>(Arena*);
template<> ::mombasa::MemoryAllocateRequest* Arena::CreateMaybeMessage<::mombasa::MemoryAllocateRequest>(Arena*);
template<> ::mombasa::MemoryAllocateResponse* Arena::CreateMaybeMessage<::mombasa::MemoryAllocateResponse>(Arena*);
template<> ::mombasa::MemoryFreeRequest* Arena::CreateMaybeMessage<::mombasa::MemoryFreeRequest>(Arena*);
template<> ::mombasa::MemoryFreeResponse* Arena::CreateMaybeMessage<::mombasa::MemoryFreeResponse>(Arena*);
template<> ::mombasa::MemoryPollRequest* Arena::CreateMaybeMessage<::mombasa::MemoryPollRequest>(Arena*);
template<> ::mombasa::MemoryProtectRequest* Arena::CreateMaybeMessage<::mombasa::MemoryProtectRequest>(Arena*);
template<> ::mombasa::MemoryProtectResponse* Arena::CreateMaybeMessage<::mombasa::MemoryProtectResponse>(Arena*);
template<> ::mombasa::MemoryReadRequest* Arena::CreateMaybeMessage<::mombasa::MemoryReadRequest>(Arena*);
template<> ::mombasa::MemoryReadResponse* Arena::CreateMaybeMessage<::mombasa::MemoryReadResponse>(Arena*);
template<> ::mombasa::MemoryWriteRequest* Arena::CreateMaybeMessage<::mombasa::MemoryWriteRequest>(Arena*);
template<> ::mombasa::MemoryWriteResponse* Arena::CreateMaybeMessage<::mombasa::MemoryWriteResponse>(Arena*);
template<> ::mombasa::SetTlsValueRequest* Arena::CreateMaybeMessage<::mombasa::SetTlsValueRequest>(Arena*);
template<> ::mombasa::SetTlsValueResponse* Arena::CreateMaybeMessage<::mombasa::SetTlsValueResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mombasa {

// ===================================================================

class CallRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.CallRequest) */ {
 public:
  inline CallRequest() : CallRequest(nullptr) {}
  ~CallRequest() override;
  explicit constexpr CallRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallRequest(const CallRequest& from);
  CallRequest(CallRequest&& from) noexcept
    : CallRequest() {
    *this = ::std::move(from);
  }

  inline CallRequest& operator=(const CallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallRequest& operator=(CallRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallRequest* internal_default_instance() {
    return reinterpret_cast<const CallRequest*>(
               &_CallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CallRequest& a, CallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CallRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallRequest* New() const final {
    return new CallRequest();
  }

  CallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.CallRequest";
  }
  protected:
  explicit CallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kFunctionPointerFieldNumber = 1,
    kReturnsFloatFieldNumber = 3,
  };
  // repeated fixed64 args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_args(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_args() const;
  void _internal_add_args(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_args();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 args(int index) const;
  void set_args(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_args(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_args();

  // fixed64 functionPointer = 1;
  void clear_functionpointer();
  ::PROTOBUF_NAMESPACE_ID::uint64 functionpointer() const;
  void set_functionpointer(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_functionpointer() const;
  void _internal_set_functionpointer(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool returnsFloat = 3;
  void clear_returnsfloat();
  bool returnsfloat() const;
  void set_returnsfloat(bool value);
  private:
  bool _internal_returnsfloat() const;
  void _internal_set_returnsfloat(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.CallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > args_;
  ::PROTOBUF_NAMESPACE_ID::uint64 functionpointer_;
  bool returnsfloat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class CallResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.CallResponse) */ {
 public:
  inline CallResponse() : CallResponse(nullptr) {}
  ~CallResponse() override;
  explicit constexpr CallResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallResponse(const CallResponse& from);
  CallResponse(CallResponse&& from) noexcept
    : CallResponse() {
    *this = ::std::move(from);
  }

  inline CallResponse& operator=(const CallResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallResponse& operator=(CallResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CallResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallResponse* internal_default_instance() {
    return reinterpret_cast<const CallResponse*>(
               &_CallResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CallResponse& a, CallResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CallResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CallResponse* New() const final {
    return new CallResponse();
  }

  CallResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CallResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CallResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CallResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CallResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.CallResponse";
  }
  protected:
  explicit CallResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
    kValueFieldNumber = 3,
    kSuccessFieldNumber = 2,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.CallResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryWriteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryWriteRequest) */ {
 public:
  inline MemoryWriteRequest() : MemoryWriteRequest(nullptr) {}
  ~MemoryWriteRequest() override;
  explicit constexpr MemoryWriteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryWriteRequest(const MemoryWriteRequest& from);
  MemoryWriteRequest(MemoryWriteRequest&& from) noexcept
    : MemoryWriteRequest() {
    *this = ::std::move(from);
  }

  inline MemoryWriteRequest& operator=(const MemoryWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryWriteRequest& operator=(MemoryWriteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryWriteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryWriteRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryWriteRequest*>(
               &_MemoryWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MemoryWriteRequest& a, MemoryWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryWriteRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryWriteRequest* New() const final {
    return new MemoryWriteRequest();
  }

  MemoryWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryWriteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryWriteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryWriteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryWriteRequest";
  }
  protected:
  explicit MemoryWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // fixed64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryWriteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryWriteResponse) */ {
 public:
  inline MemoryWriteResponse() : MemoryWriteResponse(nullptr) {}
  ~MemoryWriteResponse() override;
  explicit constexpr MemoryWriteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryWriteResponse(const MemoryWriteResponse& from);
  MemoryWriteResponse(MemoryWriteResponse&& from) noexcept
    : MemoryWriteResponse() {
    *this = ::std::move(from);
  }

  inline MemoryWriteResponse& operator=(const MemoryWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryWriteResponse& operator=(MemoryWriteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryWriteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryWriteResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryWriteResponse*>(
               &_MemoryWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MemoryWriteResponse& a, MemoryWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryWriteResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryWriteResponse* New() const final {
    return new MemoryWriteResponse();
  }

  MemoryWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryWriteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryWriteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryWriteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryWriteResponse";
  }
  protected:
  explicit MemoryWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryPollRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryPollRequest) */ {
 public:
  inline MemoryPollRequest() : MemoryPollRequest(nullptr) {}
  ~MemoryPollRequest() override;
  explicit constexpr MemoryPollRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryPollRequest(const MemoryPollRequest& from);
  MemoryPollRequest(MemoryPollRequest&& from) noexcept
    : MemoryPollRequest() {
    *this = ::std::move(from);
  }

  inline MemoryPollRequest& operator=(const MemoryPollRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryPollRequest& operator=(MemoryPollRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryPollRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryPollRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryPollRequest*>(
               &_MemoryPollRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MemoryPollRequest& a, MemoryPollRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryPollRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryPollRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryPollRequest* New() const final {
    return new MemoryPollRequest();
  }

  MemoryPollRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryPollRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryPollRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryPollRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryPollRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryPollRequest";
  }
  protected:
  explicit MemoryPollRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCountFieldNumber = 2,
    kIntervalFieldNumber = 3,
  };
  // fixed64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 interval = 3;
  void clear_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 interval() const;
  void set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interval() const;
  void _internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryPollRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryReadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryReadRequest) */ {
 public:
  inline MemoryReadRequest() : MemoryReadRequest(nullptr) {}
  ~MemoryReadRequest() override;
  explicit constexpr MemoryReadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryReadRequest(const MemoryReadRequest& from);
  MemoryReadRequest(MemoryReadRequest&& from) noexcept
    : MemoryReadRequest() {
    *this = ::std::move(from);
  }

  inline MemoryReadRequest& operator=(const MemoryReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryReadRequest& operator=(MemoryReadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryReadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryReadRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryReadRequest*>(
               &_MemoryReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MemoryReadRequest& a, MemoryReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryReadRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryReadRequest* New() const final {
    return new MemoryReadRequest();
  }

  MemoryReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryReadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryReadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryReadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryReadRequest";
  }
  protected:
  explicit MemoryReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // fixed64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryReadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryReadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryReadResponse) */ {
 public:
  inline MemoryReadResponse() : MemoryReadResponse(nullptr) {}
  ~MemoryReadResponse() override;
  explicit constexpr MemoryReadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryReadResponse(const MemoryReadResponse& from);
  MemoryReadResponse(MemoryReadResponse&& from) noexcept
    : MemoryReadResponse() {
    *this = ::std::move(from);
  }

  inline MemoryReadResponse& operator=(const MemoryReadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryReadResponse& operator=(MemoryReadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryReadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryReadResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryReadResponse*>(
               &_MemoryReadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MemoryReadResponse& a, MemoryReadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryReadResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryReadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryReadResponse* New() const final {
    return new MemoryReadResponse();
  }

  MemoryReadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryReadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryReadResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryReadResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryReadResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryReadResponse";
  }
  protected:
  explicit MemoryReadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kDurationMicrosecondsFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryReadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryAllocateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryAllocateRequest) */ {
 public:
  inline MemoryAllocateRequest() : MemoryAllocateRequest(nullptr) {}
  ~MemoryAllocateRequest() override;
  explicit constexpr MemoryAllocateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAllocateRequest(const MemoryAllocateRequest& from);
  MemoryAllocateRequest(MemoryAllocateRequest&& from) noexcept
    : MemoryAllocateRequest() {
    *this = ::std::move(from);
  }

  inline MemoryAllocateRequest& operator=(const MemoryAllocateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAllocateRequest& operator=(MemoryAllocateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryAllocateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAllocateRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryAllocateRequest*>(
               &_MemoryAllocateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MemoryAllocateRequest& a, MemoryAllocateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAllocateRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAllocateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryAllocateRequest* New() const final {
    return new MemoryAllocateRequest();
  }

  MemoryAllocateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryAllocateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryAllocateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryAllocateRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAllocateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryAllocateRequest";
  }
  protected:
  explicit MemoryAllocateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kProtectionFieldNumber = 2,
  };
  // uint32 length = 1;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 protection = 2;
  void clear_protection();
  ::PROTOBUF_NAMESPACE_ID::uint32 protection() const;
  void set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protection() const;
  void _internal_set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryAllocateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryAllocateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryAllocateResponse) */ {
 public:
  inline MemoryAllocateResponse() : MemoryAllocateResponse(nullptr) {}
  ~MemoryAllocateResponse() override;
  explicit constexpr MemoryAllocateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryAllocateResponse(const MemoryAllocateResponse& from);
  MemoryAllocateResponse(MemoryAllocateResponse&& from) noexcept
    : MemoryAllocateResponse() {
    *this = ::std::move(from);
  }

  inline MemoryAllocateResponse& operator=(const MemoryAllocateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryAllocateResponse& operator=(MemoryAllocateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryAllocateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryAllocateResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryAllocateResponse*>(
               &_MemoryAllocateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MemoryAllocateResponse& a, MemoryAllocateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryAllocateResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryAllocateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryAllocateResponse* New() const final {
    return new MemoryAllocateResponse();
  }

  MemoryAllocateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryAllocateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryAllocateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryAllocateResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryAllocateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryAllocateResponse";
  }
  protected:
  explicit MemoryAllocateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // fixed64 address = 2;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryAllocateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryFreeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryFreeRequest) */ {
 public:
  inline MemoryFreeRequest() : MemoryFreeRequest(nullptr) {}
  ~MemoryFreeRequest() override;
  explicit constexpr MemoryFreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryFreeRequest(const MemoryFreeRequest& from);
  MemoryFreeRequest(MemoryFreeRequest&& from) noexcept
    : MemoryFreeRequest() {
    *this = ::std::move(from);
  }

  inline MemoryFreeRequest& operator=(const MemoryFreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryFreeRequest& operator=(MemoryFreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryFreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryFreeRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryFreeRequest*>(
               &_MemoryFreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MemoryFreeRequest& a, MemoryFreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryFreeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryFreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryFreeRequest* New() const final {
    return new MemoryFreeRequest();
  }

  MemoryFreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryFreeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryFreeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryFreeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryFreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryFreeRequest";
  }
  protected:
  explicit MemoryFreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLengthFieldNumber = 2,
    kFreeTypeFieldNumber = 3,
  };
  // fixed64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 freeType = 3;
  void clear_freetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 freetype() const;
  void set_freetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freetype() const;
  void _internal_set_freetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryFreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryFreeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryFreeResponse) */ {
 public:
  inline MemoryFreeResponse() : MemoryFreeResponse(nullptr) {}
  ~MemoryFreeResponse() override;
  explicit constexpr MemoryFreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryFreeResponse(const MemoryFreeResponse& from);
  MemoryFreeResponse(MemoryFreeResponse&& from) noexcept
    : MemoryFreeResponse() {
    *this = ::std::move(from);
  }

  inline MemoryFreeResponse& operator=(const MemoryFreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryFreeResponse& operator=(MemoryFreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryFreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryFreeResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryFreeResponse*>(
               &_MemoryFreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MemoryFreeResponse& a, MemoryFreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryFreeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryFreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryFreeResponse* New() const final {
    return new MemoryFreeResponse();
  }

  MemoryFreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryFreeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryFreeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryFreeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryFreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryFreeResponse";
  }
  protected:
  explicit MemoryFreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryFreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryProtectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryProtectRequest) */ {
 public:
  inline MemoryProtectRequest() : MemoryProtectRequest(nullptr) {}
  ~MemoryProtectRequest() override;
  explicit constexpr MemoryProtectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryProtectRequest(const MemoryProtectRequest& from);
  MemoryProtectRequest(MemoryProtectRequest&& from) noexcept
    : MemoryProtectRequest() {
    *this = ::std::move(from);
  }

  inline MemoryProtectRequest& operator=(const MemoryProtectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryProtectRequest& operator=(MemoryProtectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryProtectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryProtectRequest* internal_default_instance() {
    return reinterpret_cast<const MemoryProtectRequest*>(
               &_MemoryProtectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MemoryProtectRequest& a, MemoryProtectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryProtectRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryProtectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryProtectRequest* New() const final {
    return new MemoryProtectRequest();
  }

  MemoryProtectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryProtectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryProtectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryProtectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProtectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryProtectRequest";
  }
  protected:
  explicit MemoryProtectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kLengthFieldNumber = 2,
    kProtectionFieldNumber = 3,
  };
  // fixed64 address = 1;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_address() const;
  void _internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 protection = 3;
  void clear_protection();
  ::PROTOBUF_NAMESPACE_ID::uint32 protection() const;
  void set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_protection() const;
  void _internal_set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryProtectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protection_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class MemoryProtectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.MemoryProtectResponse) */ {
 public:
  inline MemoryProtectResponse() : MemoryProtectResponse(nullptr) {}
  ~MemoryProtectResponse() override;
  explicit constexpr MemoryProtectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MemoryProtectResponse(const MemoryProtectResponse& from);
  MemoryProtectResponse(MemoryProtectResponse&& from) noexcept
    : MemoryProtectResponse() {
    *this = ::std::move(from);
  }

  inline MemoryProtectResponse& operator=(const MemoryProtectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MemoryProtectResponse& operator=(MemoryProtectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MemoryProtectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MemoryProtectResponse* internal_default_instance() {
    return reinterpret_cast<const MemoryProtectResponse*>(
               &_MemoryProtectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MemoryProtectResponse& a, MemoryProtectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MemoryProtectResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MemoryProtectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MemoryProtectResponse* New() const final {
    return new MemoryProtectResponse();
  }

  MemoryProtectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MemoryProtectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MemoryProtectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MemoryProtectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MemoryProtectResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.MemoryProtectResponse";
  }
  protected:
  explicit MemoryProtectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.MemoryProtectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class SetTlsValueRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.SetTlsValueRequest) */ {
 public:
  inline SetTlsValueRequest() : SetTlsValueRequest(nullptr) {}
  ~SetTlsValueRequest() override;
  explicit constexpr SetTlsValueRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTlsValueRequest(const SetTlsValueRequest& from);
  SetTlsValueRequest(SetTlsValueRequest&& from) noexcept
    : SetTlsValueRequest() {
    *this = ::std::move(from);
  }

  inline SetTlsValueRequest& operator=(const SetTlsValueRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTlsValueRequest& operator=(SetTlsValueRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTlsValueRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTlsValueRequest* internal_default_instance() {
    return reinterpret_cast<const SetTlsValueRequest*>(
               &_SetTlsValueRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SetTlsValueRequest& a, SetTlsValueRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTlsValueRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTlsValueRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTlsValueRequest* New() const final {
    return new SetTlsValueRequest();
  }

  SetTlsValueRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTlsValueRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTlsValueRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTlsValueRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTlsValueRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.SetTlsValueRequest";
  }
  protected:
  explicit SetTlsValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // fixed64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.SetTlsValueRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// -------------------------------------------------------------------

class SetTlsValueResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mombasa.SetTlsValueResponse) */ {
 public:
  inline SetTlsValueResponse() : SetTlsValueResponse(nullptr) {}
  ~SetTlsValueResponse() override;
  explicit constexpr SetTlsValueResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTlsValueResponse(const SetTlsValueResponse& from);
  SetTlsValueResponse(SetTlsValueResponse&& from) noexcept
    : SetTlsValueResponse() {
    *this = ::std::move(from);
  }

  inline SetTlsValueResponse& operator=(const SetTlsValueResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTlsValueResponse& operator=(SetTlsValueResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetTlsValueResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTlsValueResponse* internal_default_instance() {
    return reinterpret_cast<const SetTlsValueResponse*>(
               &_SetTlsValueResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SetTlsValueResponse& a, SetTlsValueResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTlsValueResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTlsValueResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTlsValueResponse* New() const final {
    return new SetTlsValueResponse();
  }

  SetTlsValueResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTlsValueResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetTlsValueResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetTlsValueResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTlsValueResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mombasa.SetTlsValueResponse";
  }
  protected:
  explicit SetTlsValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationMicrosecondsFieldNumber = 1,
  };
  // uint64 durationMicroseconds = 1;
  void clear_durationmicroseconds();
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds() const;
  void set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_durationmicroseconds() const;
  void _internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mombasa.SetTlsValueResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 durationmicroseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mombasa_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CallRequest

// fixed64 functionPointer = 1;
inline void CallRequest::clear_functionpointer() {
  functionpointer_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallRequest::_internal_functionpointer() const {
  return functionpointer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallRequest::functionpointer() const {
  // @@protoc_insertion_point(field_get:mombasa.CallRequest.functionPointer)
  return _internal_functionpointer();
}
inline void CallRequest::_internal_set_functionpointer(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  functionpointer_ = value;
}
inline void CallRequest::set_functionpointer(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_functionpointer(value);
  // @@protoc_insertion_point(field_set:mombasa.CallRequest.functionPointer)
}

// repeated fixed64 args = 2;
inline int CallRequest::_internal_args_size() const {
  return args_.size();
}
inline int CallRequest::args_size() const {
  return _internal_args_size();
}
inline void CallRequest::clear_args() {
  args_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallRequest::_internal_args(int index) const {
  return args_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:mombasa.CallRequest.args)
  return _internal_args(index);
}
inline void CallRequest::set_args(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:mombasa.CallRequest.args)
}
inline void CallRequest::_internal_add_args(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  args_.Add(value);
}
inline void CallRequest::add_args(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_args(value);
  // @@protoc_insertion_point(field_add:mombasa.CallRequest.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CallRequest::_internal_args() const {
  return args_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
CallRequest::args() const {
  // @@protoc_insertion_point(field_list:mombasa.CallRequest.args)
  return _internal_args();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CallRequest::_internal_mutable_args() {
  return &args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
CallRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:mombasa.CallRequest.args)
  return _internal_mutable_args();
}

// bool returnsFloat = 3;
inline void CallRequest::clear_returnsfloat() {
  returnsfloat_ = false;
}
inline bool CallRequest::_internal_returnsfloat() const {
  return returnsfloat_;
}
inline bool CallRequest::returnsfloat() const {
  // @@protoc_insertion_point(field_get:mombasa.CallRequest.returnsFloat)
  return _internal_returnsfloat();
}
inline void CallRequest::_internal_set_returnsfloat(bool value) {
  
  returnsfloat_ = value;
}
inline void CallRequest::set_returnsfloat(bool value) {
  _internal_set_returnsfloat(value);
  // @@protoc_insertion_point(field_set:mombasa.CallRequest.returnsFloat)
}

// -------------------------------------------------------------------

// CallResponse

// uint64 durationMicroseconds = 1;
inline void CallResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.CallResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void CallResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void CallResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.CallResponse.durationMicroseconds)
}

// bool success = 2;
inline void CallResponse::clear_success() {
  success_ = false;
}
inline bool CallResponse::_internal_success() const {
  return success_;
}
inline bool CallResponse::success() const {
  // @@protoc_insertion_point(field_get:mombasa.CallResponse.success)
  return _internal_success();
}
inline void CallResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CallResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mombasa.CallResponse.success)
}

// fixed64 value = 3;
inline void CallResponse::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallResponse::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CallResponse::value() const {
  // @@protoc_insertion_point(field_get:mombasa.CallResponse.value)
  return _internal_value();
}
inline void CallResponse::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void CallResponse::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mombasa.CallResponse.value)
}

// -------------------------------------------------------------------

// MemoryWriteRequest

// fixed64 address = 1;
inline void MemoryWriteRequest::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryWriteRequest::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryWriteRequest::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryWriteRequest.address)
  return _internal_address();
}
inline void MemoryWriteRequest::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryWriteRequest::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryWriteRequest.address)
}

// bytes data = 2;
inline void MemoryWriteRequest::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& MemoryWriteRequest::data() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryWriteRequest.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryWriteRequest::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mombasa.MemoryWriteRequest.data)
}
inline std::string* MemoryWriteRequest::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mombasa.MemoryWriteRequest.data)
  return _s;
}
inline const std::string& MemoryWriteRequest::_internal_data() const {
  return data_.Get();
}
inline void MemoryWriteRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryWriteRequest::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryWriteRequest::release_data() {
  // @@protoc_insertion_point(field_release:mombasa.MemoryWriteRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryWriteRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mombasa.MemoryWriteRequest.data)
}

// -------------------------------------------------------------------

// MemoryWriteResponse

// uint64 durationMicroseconds = 1;
inline void MemoryWriteResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryWriteResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryWriteResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryWriteResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void MemoryWriteResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void MemoryWriteResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryWriteResponse.durationMicroseconds)
}

// -------------------------------------------------------------------

// MemoryPollRequest

// fixed64 address = 1;
inline void MemoryPollRequest::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryPollRequest::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryPollRequest::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryPollRequest.address)
  return _internal_address();
}
inline void MemoryPollRequest::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryPollRequest::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryPollRequest.address)
}

// uint32 count = 2;
inline void MemoryPollRequest::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryPollRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryPollRequest::count() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryPollRequest.count)
  return _internal_count();
}
inline void MemoryPollRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void MemoryPollRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryPollRequest.count)
}

// uint32 interval = 3;
inline void MemoryPollRequest::clear_interval() {
  interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryPollRequest::_internal_interval() const {
  return interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryPollRequest::interval() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryPollRequest.interval)
  return _internal_interval();
}
inline void MemoryPollRequest::_internal_set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interval_ = value;
}
inline void MemoryPollRequest::set_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryPollRequest.interval)
}

// -------------------------------------------------------------------

// MemoryReadRequest

// fixed64 address = 1;
inline void MemoryReadRequest::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadRequest::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadRequest::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryReadRequest.address)
  return _internal_address();
}
inline void MemoryReadRequest::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryReadRequest::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryReadRequest.address)
}

// uint32 count = 2;
inline void MemoryReadRequest::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReadRequest::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryReadRequest::count() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryReadRequest.count)
  return _internal_count();
}
inline void MemoryReadRequest::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void MemoryReadRequest::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryReadRequest.count)
}

// -------------------------------------------------------------------

// MemoryReadResponse

// uint64 durationMicroseconds = 1;
inline void MemoryReadResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryReadResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void MemoryReadResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void MemoryReadResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryReadResponse.durationMicroseconds)
}

// fixed64 address = 2;
inline void MemoryReadResponse::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadResponse::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryReadResponse::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryReadResponse.address)
  return _internal_address();
}
inline void MemoryReadResponse::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryReadResponse::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryReadResponse.address)
}

// bytes data = 3;
inline void MemoryReadResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& MemoryReadResponse::data() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryReadResponse.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MemoryReadResponse::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:mombasa.MemoryReadResponse.data)
}
inline std::string* MemoryReadResponse::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:mombasa.MemoryReadResponse.data)
  return _s;
}
inline const std::string& MemoryReadResponse::_internal_data() const {
  return data_.Get();
}
inline void MemoryReadResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MemoryReadResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MemoryReadResponse::release_data() {
  // @@protoc_insertion_point(field_release:mombasa.MemoryReadResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MemoryReadResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:mombasa.MemoryReadResponse.data)
}

// -------------------------------------------------------------------

// MemoryAllocateRequest

// uint32 length = 1;
inline void MemoryAllocateRequest::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryAllocateRequest::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryAllocateRequest::length() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryAllocateRequest.length)
  return _internal_length();
}
inline void MemoryAllocateRequest::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void MemoryAllocateRequest::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryAllocateRequest.length)
}

// uint32 protection = 2;
inline void MemoryAllocateRequest::clear_protection() {
  protection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryAllocateRequest::_internal_protection() const {
  return protection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryAllocateRequest::protection() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryAllocateRequest.protection)
  return _internal_protection();
}
inline void MemoryAllocateRequest::_internal_set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protection_ = value;
}
inline void MemoryAllocateRequest::set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protection(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryAllocateRequest.protection)
}

// -------------------------------------------------------------------

// MemoryAllocateResponse

// uint64 durationMicroseconds = 1;
inline void MemoryAllocateResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryAllocateResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryAllocateResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryAllocateResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void MemoryAllocateResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void MemoryAllocateResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryAllocateResponse.durationMicroseconds)
}

// fixed64 address = 2;
inline void MemoryAllocateResponse::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryAllocateResponse::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryAllocateResponse::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryAllocateResponse.address)
  return _internal_address();
}
inline void MemoryAllocateResponse::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryAllocateResponse::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryAllocateResponse.address)
}

// -------------------------------------------------------------------

// MemoryFreeRequest

// fixed64 address = 1;
inline void MemoryFreeRequest::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryFreeRequest::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryFreeRequest::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryFreeRequest.address)
  return _internal_address();
}
inline void MemoryFreeRequest::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryFreeRequest::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryFreeRequest.address)
}

// uint32 length = 2;
inline void MemoryFreeRequest::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryFreeRequest::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryFreeRequest::length() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryFreeRequest.length)
  return _internal_length();
}
inline void MemoryFreeRequest::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void MemoryFreeRequest::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryFreeRequest.length)
}

// uint32 freeType = 3;
inline void MemoryFreeRequest::clear_freetype() {
  freetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryFreeRequest::_internal_freetype() const {
  return freetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryFreeRequest::freetype() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryFreeRequest.freeType)
  return _internal_freetype();
}
inline void MemoryFreeRequest::_internal_set_freetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  freetype_ = value;
}
inline void MemoryFreeRequest::set_freetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freetype(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryFreeRequest.freeType)
}

// -------------------------------------------------------------------

// MemoryFreeResponse

// uint64 durationMicroseconds = 1;
inline void MemoryFreeResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryFreeResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryFreeResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryFreeResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void MemoryFreeResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void MemoryFreeResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryFreeResponse.durationMicroseconds)
}

// -------------------------------------------------------------------

// MemoryProtectRequest

// fixed64 address = 1;
inline void MemoryProtectRequest::clear_address() {
  address_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryProtectRequest::_internal_address() const {
  return address_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryProtectRequest::address() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryProtectRequest.address)
  return _internal_address();
}
inline void MemoryProtectRequest::_internal_set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_ = value;
}
inline void MemoryProtectRequest::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryProtectRequest.address)
}

// uint32 length = 2;
inline void MemoryProtectRequest::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryProtectRequest::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryProtectRequest::length() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryProtectRequest.length)
  return _internal_length();
}
inline void MemoryProtectRequest::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
}
inline void MemoryProtectRequest::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryProtectRequest.length)
}

// uint32 protection = 3;
inline void MemoryProtectRequest::clear_protection() {
  protection_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryProtectRequest::_internal_protection() const {
  return protection_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MemoryProtectRequest::protection() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryProtectRequest.protection)
  return _internal_protection();
}
inline void MemoryProtectRequest::_internal_set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  protection_ = value;
}
inline void MemoryProtectRequest::set_protection(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_protection(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryProtectRequest.protection)
}

// -------------------------------------------------------------------

// MemoryProtectResponse

// uint64 durationMicroseconds = 1;
inline void MemoryProtectResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryProtectResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MemoryProtectResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.MemoryProtectResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void MemoryProtectResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void MemoryProtectResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.MemoryProtectResponse.durationMicroseconds)
}

// -------------------------------------------------------------------

// SetTlsValueRequest

// uint32 index = 1;
inline void SetTlsValueRequest::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTlsValueRequest::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SetTlsValueRequest::index() const {
  // @@protoc_insertion_point(field_get:mombasa.SetTlsValueRequest.index)
  return _internal_index();
}
inline void SetTlsValueRequest::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void SetTlsValueRequest::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mombasa.SetTlsValueRequest.index)
}

// fixed64 value = 2;
inline void SetTlsValueRequest::clear_value() {
  value_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTlsValueRequest::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTlsValueRequest::value() const {
  // @@protoc_insertion_point(field_get:mombasa.SetTlsValueRequest.value)
  return _internal_value();
}
inline void SetTlsValueRequest::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void SetTlsValueRequest::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mombasa.SetTlsValueRequest.value)
}

// -------------------------------------------------------------------

// SetTlsValueResponse

// uint64 durationMicroseconds = 1;
inline void SetTlsValueResponse::clear_durationmicroseconds() {
  durationmicroseconds_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTlsValueResponse::_internal_durationmicroseconds() const {
  return durationmicroseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SetTlsValueResponse::durationmicroseconds() const {
  // @@protoc_insertion_point(field_get:mombasa.SetTlsValueResponse.durationMicroseconds)
  return _internal_durationmicroseconds();
}
inline void SetTlsValueResponse::_internal_set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  durationmicroseconds_ = value;
}
inline void SetTlsValueResponse::set_durationmicroseconds(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_durationmicroseconds(value);
  // @@protoc_insertion_point(field_set:mombasa.SetTlsValueResponse.durationMicroseconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mombasa

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mombasa_2eproto
