<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Superintendent.Core.CommandSink;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

/*
 *
 *
 *
 *
 *   This file is auto generated
 *     Do not modify manually
 *        Edit the template
 *
 *
 *
 *
 *
 */

namespace Superintendent.Core
{
    public abstract class CommandSinkClient<TOffsets>
    {
        public readonly ICommandSink CommandSink;
        public readonly TOffsets Offsets;

        protected CommandSinkClient(ICommandSink sink, TOffsets offsets)
        {
            this.CommandSink = sink;
            this.Offsets = offsets;
        }
    }

    public class InvocationException : Exception { }

    public class Fun 
    {
        public Fun(nint address)
        {
            this.Address = address;
        }

        public nint Address { get; }

        public static implicit operator Fun(nint address) => new(address);
    }

    public class ParamNamesAttribute : Attribute
    {
        private readonly string[] names;

        public ParamNamesAttribute(params string[] names)
        {
            this.names = names;
        }
    }

<#
    for(int i = 0; i < 8; i++)
    {
        string typeArgs = "<";

        for(int j = 0; j < i; j++)
        {
            typeArgs += ("TArg" + (j+1) + ", ");
        }

        typeArgs += "TRet>";
    
#>
    public class Fun<#=typeArgs#> : Fun 
    {
        public Fun(nint address) : base(address) { } 
        public static implicit operator Fun<#=typeArgs#>(nint address) => new (address); 
        public static implicit operator nint(Fun<#=typeArgs#> fun) => fun.Address;
    }
<#
    }
#>

    public class FunVoid : Fun 
    {
        public FunVoid(nint address) : base(address) { } 
        public static implicit operator FunVoid(nint address) => new (address); 
        public static implicit operator nint(FunVoid fun) => fun.Address;
    }

<#
    for(int i = 1; i < 8; i++)
    {
        string typeArgs = "<";

        for(int j = 0; j < i; j++)
        {
            typeArgs += ("TArg" + (j+1));

            if(j < i-1)
            {
                typeArgs += ", ";
            }
        }

        typeArgs += ">";
    
#>
    public class FunVoid<#=typeArgs#> : Fun 
    {
        public FunVoid(nint address) : base(address) { } 
        public static implicit operator FunVoid<#=typeArgs#>(nint address) => new (address); 
        public static implicit operator nint(FunVoid<#=typeArgs#> fun) => fun.Address;
    }
<#
    }
#>


    public struct Ptr<T> where T : unmanaged
    {
        public T Value { get; set; }

        public Ptr(T value)
        {
            this.Value = value;
        }

        public static Ptr<T> From(T value)
        {
            return new Ptr<T>(value);
        }

        public static implicit operator nint(Ptr<T> ptr)
        {
            if (ptr is Ptr<nint> nintPtr)
                return nintPtr.Value;

            return 0;
        }
    }
}
