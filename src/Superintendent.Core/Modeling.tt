<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

using Superintendent.Core.CommandSink;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

/*
 *
 *
 *
 *
 *   This file is auto generated
 *     Do not modify manually
 *        Edit the template
 *
 *
 *
 *
 *
 */

namespace Superintendent.Core
{
    public abstract class CommandSinkClient<TOffsets>
    {
        public readonly ICommandSink CommandSink;
        public readonly TOffsets Offsets;
        public IAllocator? Allocator { get; set; }

        protected CommandSinkClient(ICommandSink sink, TOffsets offsets, IAllocator? allocator = null)
        {
            this.CommandSink = sink;
            this.Offsets = offsets;
            this.Allocator = allocator;
        }
    }

    public class InvocationException : Exception { }

    public class Fun 
    {
        public Fun(nint address)
        {
            this.Address = address;
        }

        public nint Address { get; }

        public static implicit operator Fun(nint address) => new(address);
    }

    [AttributeUsage(AttributeTargets.Method)]
    public class ParamNamesAttribute : Attribute
    {
        private readonly string[] names;

        public ParamNamesAttribute(params string[] names)
        {
            this.names = names;
        }
    }

    ///<summary>Used in Fun<T> args to indicate how to encode the string. Generated function will accept System.String</summary>
    public class Utf8String { }

    ///<summary>Used in Fun<T> args to indicate how to encode the string. Generated function will accept System.String</summary>
    public class AsciiString { }

    ///<summary>Used in Fun<T> args to indicate how to encode the string. Generated function will accept System.String</summary>
    public class Utf16String { }

<#
    for(int i = 0; i < 8; i++)
    {
        string typeArgs = "<";

        for(int j = 0; j < i; j++)
        {
            typeArgs += ("TArg" + (j+1) + ", ");
        }

        typeArgs += "TRet>";
    
#>
    public class Fun<#=typeArgs#> : Fun 
    {
        public Fun(nint address) : base(address) { } 
        public static implicit operator Fun<#=typeArgs#>(nint address) => new (address); 
        public static implicit operator nint(Fun<#=typeArgs#> fun) => fun.Address;
    }
<#
    }
#>

    public class FunVoid : Fun 
    {
        public FunVoid(nint address) : base(address) { } 
        public static implicit operator FunVoid(nint address) => new (address); 
        public static implicit operator nint(FunVoid fun) => fun.Address;
    }

<#
    for(int i = 1; i < 8; i++)
    {
        string typeArgs = "<";

        for(int j = 0; j < i; j++)
        {
            typeArgs += ("TArg" + (j+1));

            if(j < i-1)
            {
                typeArgs += ", ";
            }
        }

        typeArgs += ">";
    
#>
    public class FunVoid<#=typeArgs#> : Fun 
    {
        public FunVoid(nint address) : base(address) { } 
        public static implicit operator FunVoid<#=typeArgs#>(nint address) => new (address); 
        public static implicit operator nint(FunVoid<#=typeArgs#> fun) => fun.Address;
    }
<#
    }
#>

    ///<summary>An absolute pointer to a value.</summary>
    public struct AbsolutePtr<T> where T: unmanaged
    {
        public nint Address { get; set; }
        public nint[]? Chain { get; set; }

        public AbsolutePtr(nint address, nint[]? chain)
        {
            this.Address = address;
            this.Chain = chain;
        }

        public Ptr<T> AsPtr<T>() => new Ptr<T>(this.Address, this.Chain);
    }
    
    ///<summary>A relative (to a module offset) pointer to a value.</summary>
    public struct Ptr<T> where T : unmanaged
    {
        public nint Base { get; set; }
        public nint[]? Chain { get; set; }

        public Ptr(nint baseOffset, nint[]? chain)
        {
            this.Base = baseOffset;
            this.Chain = chain;
        }
    }
}
